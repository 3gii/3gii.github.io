<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python中的数字]]></title>
    <url>%2F2017%2F01%2F11%2Fnumber%2F</url>
    <content type="text"><![CDATA[Python中的数字 在Python2中整型数据，分整型和长整型，而在Python3中只有整型 Python中的进制 整型可编写为十进制、二进制、八进制以及十六进制 十六进制以0x或0X开头，后面跟十六进制的数字0-9和A-F，不区分大小写 八进制以0o或0O开头，后面接0-7，在Python2.6及更早的版本中，八进制常量也可以写成前面只有一个0的形式，但在Python3中需要采用0o的形式 Python2.6和Python3.0中的新的二进制常量，以0b或0B开头 注意：所有的这些常量在程序代码中都产生一个整数对象。它们仅仅是特定值得不同语法表示而已，内置函数hex(I)、oct(I)和bin(I)把一个整型转换为这三种进制表示的字符串，int(str, base) 根据每个给定的进制把一个运行时字符串转换为一个整数。 关于除法 在Python2中/表示传统除法，如果两个操作数都是整数的话，执行截断整数除法即Floor除法。否则执行浮点除法（正真除法） 在Python3中/总是执行正真除法，//执行Floor除法 注意：//操作符通常叫做截断除法，但是，更准确的说法是floor除法，它把结果向下截断到下层，即真正结果之下的最近的整数，其直接效果是向下舍入，并不是严格的截断。区别如下 12345import mathmath.floor(2.5) # 2math.floor(-2.5) # -3math.trunc(2.5) # 2math.trunc(-2.5) # -2 在Python3中 123456&gt;&gt;&gt; (5/2), (5/2.0), (5/-2.0), (5/-2)(2.5, 2.5, -2.5, -2.5)&gt;&gt;&gt; (5//2), (5//2.0), (5//-2.0), (5//-2)(2, 2.0, -3.0, -3)&gt;&gt;&gt; (9/3), (9.0/3), (9//3), (9//3.0)(3, 3.0, 3, 3.0) 在Python2中 123456&gt;&gt;&gt; (5/2), (5/2.0), (5/-2.0), (5/-2)(2.5, 2.5, -2.5, -3)&gt;&gt;&gt; (5//2), (5//2.0), (5//-2.0), (5//-2)(2, 2.0, -3.0, -3)&gt;&gt;&gt; (9/3), (9.0/3), (9//3), (9//3.0)(3, 3.0, 3, 3.0) 内置数学工具123456789101112# 省略结果&gt;&gt;&gt; import math&gt;&gt;&gt; math.pi, math.e&gt;&gt;&gt; math.sin(2*math.pi/180)&gt;&gt;&gt; math.sqrt(144)&gt;&gt;&gt; pow(2, 4) # 2 ** 4&gt;&gt;&gt; abs(-42.0), sum((1, 2, 3))&gt;&gt;&gt; import random&gt;&gt;&gt; random.randow()&gt;&gt;&gt; random.randint(1, 10)&gt;&gt;&gt; random.choice([1, 2, 3]) Random模块很实用，在游戏中的发牌，在演示GUI中的随机图片、进行统计仿真等都需要Random模块 设置全局精度1234&gt;&gt;&gt; import decimal&gt;&gt;&gt; decimal.Decimal(1)/decimal.Decimal(7)&gt;&gt;&gt; decimal.getcontext().prec = 2&gt;&gt;&gt; pay = decimal.Decimal(str(1999 + 1.33)) 小数上下文管理器12345&gt;&gt;&gt; import decimal&gt;&gt;&gt; decimal.Decimal('1.00') / decimal.Decimal('3.00')&gt;&gt;&gt; with decimal.localcontext(): ctx.prec = 2 decimal.Decimal('1.00') / decimal.Decimal('3.00') 分数类型12&gt;&gt;&gt; from fractions import Fraction&gt;&gt;&gt; x = Fraction(1, 3) # 1/3 关于其中的精度问题以后做讨论]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python数据类型</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从Python2到Python3]]></title>
    <url>%2F2017%2F01%2F10%2Fpy2-py3%2F</url>
    <content type="text"><![CDATA[Python2与Python3中的扩展 这里只是列出部分变化，并不对其用法进行详细说明 Python3.0中的print函数 Python3.0中的nonlocal x, y语句 Python2.6和Python3.0中的str.format方法 Python3.0中的字符串类型：str用于Unicode文本，bytes用于二进制数据 Python2.6和Python3.0中的类装饰器：@private(‘age’) Python3.0中的新的迭代器：range、map、zip Python3.0中的字典视图：D.keys、D.values、D.items Python3.0中的除法运算：余数、/和// Python3.0中的集合常量：{a, b, c} Python3.0中的集合解析：{x**2 for x in seq} Python3.0中的字典解析：{x: x**2 for x in seq} Python2.6和Python3.0中的二进制位字符串支持：0b0101，bin(I) Python3.0中的函数注释：def f(a:99, b:str) -&gt; int Python3.0中的Keyword-only参数：def f(a, *b, c, **d) Python3.0中的扩展的序列分解：a，*b = seq Python3.0中的可用的针对包的导入语法：from Python2.6和Python3.0中可用的环境管理器：with/as Python3.0中的异常语法修改：raise、except/as、superclass Python3.0中的异常链：raise e2 from e1 Python2.6和Python3.0中的保留字的变化 Python3.0中的新式类的取消 Python2.6和Python3.0中的特性装饰符：@property Python2.6和Python3.0中的描述符 Python2.6和Python3.0中的抽象基类 Python3.0语言中的删除 删除 替代 class MyException: class MyException(Exception) exceptions module 内置作用域，库手册 thread、Queue modules _thread, queue(二者都改名了) anydbm module dbm(改名了) cPickle module _pickle(改名了，自动使用) os.popen2/3/4 subprocess.Popen(os.popen保留) 基于字符串的异常 基于类的异常（Python2.6中也是如此） 字符串模块函数 字符串对象方法 未绑定方法 函数（通过实例调用静态方法） 混合类型比较、排序 非数字的混合类型比较是错误 pint &gt;&gt; F, x, y print(x, y file=F) print x, y, print(x, y end=’ ‘) u’ccc’ ‘ccc’ ‘bbb’ for byte strings b ‘bbb’ b’bbb’ raise E, V raise E(V) except E, X except E as X: def f((a, b)): def f(x): (a, b) = x file.xreadlines for line in file: (or X=iter(file)) D.keys()等 list(D.keys())(字典视图) map(), range(), etc. list(map()), list(range()) as lists (内置函数) map(None, …) zip(或手动代码来补充结果) X = D.keys(); X.sort() sorted(D) (或list(D.keys())) cmp(x, y) (x &gt; y) - (x &lt; y) X.__cmp__(y) __lt__、__gt__、、__eq__等 X__nonzero__ X__bool__ X.__hex__ ，X.__oct__ X.__index__ 排序比较函数 使用key=transform或reverse=True Dictionary &lt;, &gt;, &lt;=, &gt;= Compare sorted(D.items())(或循环代码) types.ListType list(type只用于非内建名称) __metaclass__ = M class C(metaclass=M): __builtin__ builtins(重命名) Tkinter tkinter(重命名) sys.exc_type、exc_value sys.exc_info()[0], [1] function.func_code function.__code__ 由内置函数运行的 在包装类中重定义__X__方法 __getattr__ -t,__tt命令行切换 不一致地使用制表符/空格总是一个错误 一个函数中的from… * 只能够出现在一个文件的顶层 导入模块，在同一包中 from . import mod . 包相关的形式]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python2</tag>
        <tag>Python3</tag>
      </tags>
  </entry>
</search>
